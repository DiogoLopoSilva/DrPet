@model DrPet.Web.Models.AppointmentViewModel

@using Syncfusion.EJ2

@{
    ViewData["Title"] = "Create";

    var dataManager = new DataManager()
    {
        Url = $"GetData?username={Model.ClientUsername}",
        Adaptor = "UrlAdaptor",
        CrudUrl = "UpdateData",
        CrossDomain = true
    };
}

<div class="View">
    <div class="row justify-content-center">
        <div class="col-6">
            <h2 class="mb-5 text-center">Double-Click on a Cell to schedule an appointment</h2>
            <div class="mb-5">
                <ejs-schedule id="schedule" height="550" startHour="09:00" endHour="18:00" allowDragAndDrop="false" minDate="@DateTime.Today.AddDays(1)" maxDate="@DateTime.Today.AddMonths(1)" allowResizing="false"
                              allowMultiCellSelection="false" timezone="UTC" eventRendered="onEventRendered" actionBegin="onActionBegin" popupOpen="onPopupOpen" actionComplete="onActionComplete" showQuickInfo="false" editorTemplate="#EventEditorTemplate">
                    <e-schedule-views>
                        <e-schedule-view option="WorkWeek"></e-schedule-view>
                    </e-schedule-views>
                    <e-schedule-eventsettings dataSource="dataManager"></e-schedule-eventsettings>
                </ejs-schedule>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script type="text/javascript">
    var date;
    var doctorId;

    function EditLists(args) {
        var date = args.data.StartTime.toISOString();
        var doctor = JSON.parse(JSON.stringify(args.data.Doctor.Id));
        var client = JSON.parse(JSON.stringify(args.data.Client.User.UserName));
        var spec = JSON.parse(JSON.stringify(args.data.Specialization.Id));
        doctorId = doctor;
        console.log('DATA');
        console.log(args.data);
             $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetLists", "Appointments")',
                    data: {
                        StartTime: date,
                        DoctorId: doctor,
                        ClientUsername: client,
                        specializationId: spec
                    },
                    dataType: "json",
                    success: function (data) {
                        if (data.result == "Success") {
                            //console.log(data.list);

                            console.log("DATA");
                            console.log(args.data);

                            var statusElement = args.element.querySelector('#SpecializationsList');
                            //console.log(statusElement);
                            if (!statusElement.classList.contains('e-dropdownlist')) {
                                var dropDownListObject = new ej.dropdowns.DropDownList({
                                    placeholder: 'Choose Specialization', value: statusElement.value,
                                    dataSource: data.listSpecializations,
                                    fields: { text: 'Text', value: 'Value' },
                                    floatLabelType: 'Always', placeholder: 'Choose a Specialization',
                                    Id: 'ddlspecialization',
                                    value: String(args.data.Specialization.Id),
                                    change: onChangeEdit
                                });

                                dropDownListObject.appendTo(statusElement);
                                statusElement.setAttribute('name', 'SpecializationId');
                            }

                            var statusElement = args.element.querySelector('#DoctorList');
                            //console.log(statusElement);
                            if (!statusElement.classList.contains('e-dropdownlist')) {
                                var dropDownListObject = new ej.dropdowns.DropDownList({
                                    placeholder: 'Choose status', value: statusElement.value,
                                    dataSource: data.list,
                                    fields: { text: 'Text', value: 'Value' },
                                    value: String(args.data.Doctor.Id),
                                    floatLabelType: 'Always', placeholder: 'Choose a Doctor'
                                });

                                dropDownListObject.appendTo(statusElement);
                                statusElement.setAttribute('name', 'DoctorId');
                            }

                            console.log(args.data.Animal.Id);

                            var statusElement = args.element.querySelector('#AnimalList');
                            //console.log(statusElement);
                            if (!statusElement.classList.contains('e-dropdownlist')) {
                                var dropDownListObject = new ej.dropdowns.DropDownList({
                                    placeholder: 'Choose status', value: statusElement.value,
                                    dataSource: data.listAnimals,
                                    fields: { text: 'Text', value: 'Value' },
                                    value: String(args.data.Animal.Id), //FAZER ISTO PARA A SPECIALIZATION
                                    floatLabelType: 'Always', placeholder: 'Choose an Animal'
                                });

                                dropDownListObject.appendTo(statusElement);
                                statusElement.setAttribute('name', 'AnimalId');
                            }

                        }
                        else {
                            alert("NÃO DEU");
                        }

                        //Exiba as mensagens de erro neste espaço.
                    }
                });
        }

        function GetDoctorsCreate(date,specialization) {
            var username = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientUsername));
             $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetLists", "Appointments")',
                    data: {
                        StartTime: date,
                        ClientUsername: username,
                        SpecializationId: specialization
                    },
                    dataType: "json",
                    success: function (data) {
                        if (data.result == "Success") {

                            if (data.list.length<=1) {

                            }

                            var doctorDDL = document.getElementById('DoctorList').ej2_instances[0];
                            doctorDDL.dataSource = data.list;
                        }
                        else {
                            alert("NÃO DEU");
                        }

                        //Exiba as mensagens de erro neste espaço.
                    }
             });

        }

     function GetDoctorsEdit(date,specialization) {
         var username = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientUsername));
             $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetLists", "Appointments")',
                    data: {
                        StartTime: date,
                        ClientUsername: username,
                        SpecializationId: specialization,
                        DoctorId: doctorId
                    },
                    dataType: "json",
                    success: function (data) {
                        if (data.result == "Success") {

                            if (data.list.length<=1) {

                            }

                            var doctorDDL = document.getElementById('DoctorList').ej2_instances[0];
                            doctorDDL.dataSource = data.list;
                        }
                        else {
                            alert("NÃO DEU");
                        }

                        //Exiba as mensagens de erro neste espaço.
                    }
             });

        }

     function CreateLists(args) {
            var username = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientUsername));
             $.ajax({
                    type: "GET",
                    url: '@Url.Action("GeSpecializationstList", "Appointments")',
                    data: {
                        ClientUsername: username,
                    },
                    dataType: "json",
                    success: function (data) {
                        if (data.result == "Success") {

                            var statusElement = args.element.querySelector('#SpecializationsList');
                            //console.log(statusElement);
                            if (!statusElement.classList.contains('e-dropdownlist')) {
                                var dropDownListObject = new ej.dropdowns.DropDownList({
                                    placeholder: 'Choose Specialization', value: statusElement.value,
                                    dataSource: data.listSpecializations,
                                    fields: { text: 'Text', value: 'Value' },
                                    floatLabelType: 'Always', placeholder: 'Choose a Specialization',
                                    Id: 'ddlspecialization',
                                    change: onChangeCreate
                                });

                                dropDownListObject.appendTo(statusElement);
                                statusElement.setAttribute('name', 'SpecializationId');
                            }

                             var statusElement = args.element.querySelector('#DoctorList');
                            //console.log(statusElement);
                            if (!statusElement.classList.contains('e-dropdownlist')) {
                                var dropDownListObject = new ej.dropdowns.DropDownList({
                                    placeholder: 'Choose status', value: statusElement.value,
                                    fields: { text: 'Text', value: 'Value' },
                                    floatLabelType: 'Always', placeholder: 'Choose a Doctor',
                                    Id: 'ddldoctor'
                                });

                                dropDownListObject.appendTo(statusElement);
                                statusElement.setAttribute('name', 'DoctorId');
                            }

                            var statusElement = args.element.querySelector('#AnimalList');
                            //console.log(statusElement);
                            if (!statusElement.classList.contains('e-dropdownlist')) {
                                var dropDownListObject = new ej.dropdowns.DropDownList({
                                    placeholder: 'Choose status', value: statusElement.value,
                                    dataSource: data.listAnimals,
                                    fields: { text: 'Text', value: 'Value' },
                                    floatLabelType: 'Always', placeholder: 'Choose an Animal'
                                });

                                dropDownListObject.appendTo(statusElement);
                                statusElement.setAttribute('name', 'AnimalId');
                            }

                        }
                        else {
                            alert("NÃO DEU");
                        }

                        //Exiba as mensagens de erro neste espaço.
                    }
             });
     }

    function onChangeCreate(args) {
        if (args.itemData != null) {
            console.log(args);
            var specialization = args.itemData.Value;
            GetDoctorsCreate(date, specialization);
        }
    }

    function onChangeEdit(args) {
        if (args.itemData != null) {
            console.log(args);
            var specialization = args.itemData.Value;
            GetDoctorsEdit(date, specialization,doctorId);
        }
    }

    function onActionComplete(args) {
        if (args.requestType === 'eventCreated') {

            //window.location.href = '/Home/Index';
            console.log("CREATED");
            console.log(args);
        }

        console.log("OUTRO");
        console.log(args);
    }

            function onActionBegin(args) {
            if (args.requestType === 'eventCreate' || args.requestType === 'eventChange') {
                var data;
                if (args.requestType === 'eventCreate') {
                    data = args.data[0];
                    console.log('TEST');
                    console.log(args);

                    if (args.data[0].DoctorId === "" || args.data[0].AnimalId === "") {
                    }

                    args.data[0].ClientUsername = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ClientUsername));

                    console.log('ID');
                    console.log(args.data[0].ClientUsername);

                } else if (args.requestType === 'eventChange') {
                    data = args.data;
                }
                var scheduleObj = document.getElementById('schedule').ej2_instances[0];
                if (!scheduleObj.isSlotAvailable(data.StartTime, data.EndTime)) {
                    //args.cancel = true;
                }
            }
            console.log('FORA');
            console.log(args);
             }

        function onEventRendered(args) {
            var categoryColor;
            switch (args.data.Status) {
                case 'Waiting':
                    categoryColor = '#F57F17';
                    break;
                case 'Confirmed':
                    categoryColor = '#7fa900';
                    break;
                case 'InProgress':
                    categoryColor = '#8e24aa';
                    break;
                case 'Completed':
                    categoryColor = '#00ff00';
                    break;
            }
            if (!args.element || !categoryColor) {
                return;
            }
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            if (scheduleObj.currentView === 'Agenda') {
                (args.element.firstChild).style.borderLeftColor = categoryColor;
            } else {
                args.element.style.backgroundColor = categoryColor;
            }
    }

        function onPopupOpen(args) {

            if (args.type === 'Editor') {
                var startElement = args.element.querySelector('#StartTime');
                if (!startElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(startElement.value) || new Date() }, startElement);
                }
                var endElement = args.element.querySelector('#EndTime');
                if (!endElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(endElement.value) || new Date() }, endElement);
                }
                //console.log(args);
                //console.log(args.data.StartTime);

                //console.log(JSON.stringify(args.data.StartTime));

                //var date = JSON.parse(JSON.stringify(args.data.StartTime));
                date = moment(args.data.StartTime).format();
                //console.log(date);

                console.log("DATE");
                console.log(date);

                if (args.target.textContent === "") {
                    CreateLists(args);
                }
                else {
                    EditLists(args);
                }
            }
        }
</script>


    <script id="EventEditorTemplate" type="text/x-template">
        <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr>
                    <td class="e-textlabel">Specializations</td>
                    <td colspan="4">
                        <input type="text" id="SpecializationsList" name="SpecializationId" class="e-field" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Doctors</td>
                    <td colspan="4">
                        <input type="text" id="DoctorList" name="DoctorId" class="e-field" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Animals</td>
                    <td colspan="4">
                        <input type="text" id="AnimalList" name="AnimalId" class="e-field" style="width: 100%" />
                    </td>
                </tr>
                <tr style="visibility:hidden;">
                    <td class="e-textlabel">From</td>
                    <td colspan="4">
                        <input id="StartTime" class="e-field" type="text" name="StartTime" />
                    </td>
                </tr>
                <tr style="visibility:hidden;">
                    <td class="e-textlabel">To</td>
                    <td colspan="4">
                        <input id="EndTime" class="e-field" type="text" name="EndTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Description</td>
                    <td colspan="4">
                        <textarea id="ClientDescription" class="e-field e-input" name="ClientDescription" rows="3" cols="50"
                                  style="width: 100%; height: 60px !important; resize: vertical" placeholder="Gives us a small description for the reason of this appointment"></textarea>
                    </td>
                </tr>
            </tbody>
        </table>
    </script>

}
